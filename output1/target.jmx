<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Search API ">
        <intProp name="ThreadGroup.num_threads">300</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">50</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search API">
          <stringProp name="HTTPSampler.domain">dev-1viu-api-gateway-alb.ottuat.com</stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/api/mobile</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="keyword" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${keyword}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">keyword</stringProp>
              </elementProp>
              <elementProp name="platform_flag_label" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">tv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">platform_flag_label</stringProp>
              </elementProp>
              <elementProp name="area_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">area_id</stringProp>
              </elementProp>
              <elementProp name="language_flag_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">language_flag_id</stringProp>
              </elementProp>
              <elementProp name="countryCode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">SG</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">countryCode</stringProp>
              </elementProp>
              <elementProp name="ut" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">ut</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">%2Fsearch%2Fvideo</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Data For Keywords">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">/jmeter/output/keywords.txt</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">keyword</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/jmeter/output/search.xml</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="HTTP Code 200 Assertion">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">16</intProp>
        </ResponseAssertion>
        <hashTree/>
        <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Fields Assertion">
          <stringProp name="BeanShellAssertion.query">import org.json.*;
import org.apache.jorphan.util.JMeterException;

String responseCode = prev.getResponseCode();

//if ( responseCode != &quot;200&quot; ) {
//    Failure = true;
//    FailureMessage = &quot;Assertion failed: HTTP response code is not 200, but &quot; + responseCode + &quot;.&quot;;
//    log.error(FailureMessage);
//    return;
//}

String responseData = prev.getResponseDataAsString();
JSONObject responseJson = new JSONObject(responseData);
JSONObject data = responseJson.getJSONObject(&quot;data&quot;);
JSONArray seriesArray = data.optJSONArray(&quot;series&quot;);
JSONArray movieArray = data.optJSONArray(&quot;movie&quot;);
JSONArray productArray = data.optJSONArray(&quot;product&quot;);

String[] requiredLevel1Fields = {
   &quot;status&quot;, &quot;server&quot;,&quot;data&quot;
};

JSONObject status = responseJson.getJSONObject(&quot;status&quot;);
int code = status.getInt(&quot;code&quot;);
int expectCode = 0;
if(code != expectCode){
	Failure = true;
    FailureMessage = &quot;Assertion failed: code field is not 0 ! code = &apos;&quot; + code + &quot;&apos; in response.&quot;;
    log.error(FailureMessage);
    return;
}

for (String field : requiredLevel1Fields) {
    if (!responseJson.has(field)) {
        Failure = true;
        FailureMessage = &quot;Assertion failed: Missing field &apos;&quot; + field + &quot;&apos; in response.&quot;;
        log.error(FailureMessage);
        return;
    }
}







String[] seriesFields = {
    &quot;series_id&quot;, &quot;name&quot;, &quot;cover_image_url&quot;, &quot;cover_landscape_image_url&quot;, &quot;cover_portrait_image_url&quot;,
    &quot;category_name&quot;, &quot;category_id&quot;, &quot;product_total&quot;, &quot;released_product_total&quot;, &quot;product_number&quot;,
    &quot;product_id&quot;, &quot;status&quot;, &quot;is_movie&quot;, &quot;series_image_url&quot;, &quot;product_image_url&quot;, &quot;synopsis&quot;,
    &quot;user_level&quot;, &quot;free_time&quot;, &quot;premium_time&quot;, &quot;is_free_premium_time&quot;, &quot;offline_time&quot;,
    &quot;poster_logo_url&quot;, &quot;source_flag&quot;, &quot;allow_tv&quot;, &quot;allow_telstb&quot;
};

if (seriesArray != null &amp;&amp; seriesArray.length() &gt; 0) {
    for (int i = 0; i &lt; seriesArray.length(); i++) {
        JSONObject series = seriesArray.getJSONObject(i);
        for (String field : seriesFields) {
            if (!series.has(field)) {
                Failure = true;
                FailureMessage = &quot;Assertion failed: Missing field &apos;&quot; + field + &quot;&apos; in series at index &quot; + i;
                log.error(FailureMessage);
                return;
            }
        }
    }
}




String[] movieFields = {
    &quot;series_id&quot;, &quot;name&quot;, &quot;cover_image_url&quot;, &quot;cover_landscape_image_url&quot;, &quot;cover_portrait_image_url&quot;,
    &quot;category_name&quot;, &quot;category_id&quot;, &quot;product_total&quot;, &quot;released_product_total&quot;, &quot;product_number&quot;,
    &quot;product_id&quot;, &quot;status&quot;, &quot;is_movie&quot;, &quot;series_image_url&quot;, &quot;product_image_url&quot;, &quot;synopsis&quot;,
    &quot;user_level&quot;, &quot;free_time&quot;, &quot;premium_time&quot;, &quot;is_free_premium_time&quot;, &quot;offline_time&quot;,
    &quot;poster_logo_url&quot;, &quot;source_flag&quot;, &quot;allow_tv&quot;, &quot;allow_telstb&quot;
};


if (movieArray != null &amp;&amp; movieArray.length() &gt; 0) {
    for (int i = 0; i &lt; movieArray.length(); i++) {
        JSONObject movie = movieArray.getJSONObject(i);
        for (String field : movieFields) {
            if (!movie.has(field)) {
                Failure = true;
                FailureMessage = &quot;Assertion failed: Missing field &apos;&quot; + field + &quot;&apos; in movie at index &quot; + i;
                log.error(FailureMessage);
                return;
            }
        }
    }
}



String[] productFields = {
    &quot;product_id&quot;, &quot;series_id&quot;, &quot;number&quot;, &quot;free_time&quot;, &quot;premium_time&quot;, &quot;is_free_premium_time&quot;,
    &quot;series_name&quot;, &quot;status&quot;, &quot;is_movie&quot;, &quot;cover_image_url&quot;, &quot;cover_landscape_image_url&quot;,
    &quot;cover_portrait_image_url&quot;, &quot;series_image_url&quot;, &quot;product_image_url&quot;, &quot;synopsis&quot;,
    &quot;offline_time&quot;, &quot;poster_logo_url&quot;, &quot;source_flag&quot;, &quot;allow_tv&quot;, &quot;allow_telstb&quot;,
    &quot;series_cover_landscape_image_url&quot;, &quot;series_cover_portrait_image_url&quot;, &quot;user_level&quot;,
    &quot;series_category_id&quot;, &quot;series_category_name&quot;
};


if (productArray != null &amp;&amp; productArray.length() &gt; 0) {
    for (int i = 0; i &lt; productArray.length(); i++) {
        JSONObject product = productArray.getJSONObject(i);
        for (String field : productFields) {
            if (!product.has(field)) {
                Failure = true;
                FailureMessage = &quot;Assertion failed: Missing field &apos;&quot; + field + &quot;&apos; in product at index &quot; + i;
                log.error(FailureMessage);
                return;
            }
        }
    }
}



// 如果所有字段都存在，断言成功
log.info(&quot;All required fields are present in the response.&quot;);
</stringProp>
          <stringProp name="BeanShellAssertion.filename"></stringProp>
          <stringProp name="BeanShellAssertion.parameters"></stringProp>
          <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
        </BeanShellAssertion>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
